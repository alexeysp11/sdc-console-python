KALMAN FILTER

--------------------------------------------------------------------------------------------------

6th of July 2020. 
Understanding how I can make Kalman filter better. 

The Kalman Filter estimates location of the car while it is not moving with absolute error around 
5 meters. 
We need to implement an algorithm for estimating location while the car is moving in 2D space. 
We need to use OOP approach to code this program and to use more complex fuctions (try/catch, 
comprohensions, context manager etc). 

We need to devide projects: one project is used for main program, one project is used for reports. 
Plus we need to make some unit tests and different implementations for different situations 
(staying and moving). 

Now Kalman filter can predict the position of the car depending on data from GPS receiver in 
one-dimensional space. 
I want it to be able to make this kind of predictions 1) in motion, 2) at least in two-dimensional 
space or even in three-dimensional space and 3) depending on some more sensors such as IMU, radar 
and lidar. 

I can read what other developers have done with Kalman filter issue: 
https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python

--------------------------------------------------------------------------------------------------

7th of July 2020. 
Making Kalman filter work in 2D space.

First of all, we need to understand the criterion of that the algorithm works well. In 1D space it 
was a diagram of a function Estimation vs Data. So in order to check if the system works well with
data in 2D space, I have 5 different options: 
1) I can use 2 diagrams of Estimation vs Data with respect to each axis, 
2) I can use a graph of Estimation vs Data in 3D space, 
3) I can simulate a behavior of the car and show prediction of the system on a map, 
4) I can use one diagram which contains both data and predictions with respect to each axis. 

Using 2nd option is a bad idea because Estimation with respect to X axis doesn't depend on Data
with respect to Y axis, for example, and vice versa. 
I can use 3rd option only when I complete a project of GUI. 
So now I only can use 1st and 4th options to show that the Kalman filter works correctly. 

Tomorrow I'm going to start to implement an algorithm of the Kalman filter for 2D space. 

--------------------------------------------------------------------------------------------------

8th of July 2020. 
Implementation of Kalman filter for 2D space (day 1). 

I need to rewrite an algorithm of Kalman filter estimation system for 2D space. 

I also wanna implement the Kalman filter in motion. I'm gonna get current position, velocity and 
acceleration to predict position and velocity in the next 0, 1, 2, 3, 4, 5, 10, 15, 20 seconds. 
In order to show how Kalman filter works in 1D space for a moving car I can use one diagram as 
I did for staying car in 1D space, but now truth value is going to change. 

So I can use the same idea for location estimating of a moving car in 2D space. 
Also if we want to predict position in the next n seconds, we have to use either threading for 
running several Kalman filter algorithms at the same time or one Kalman filter algorithm for 
getting estimations at these points. 

Here you can read about smoothing algorithm based on Kalman filter:
https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/blob/master/06-Multivariate-Kalman-Filters.ipynb

--------------------------------------------------------------------------------------------------

10th of July 2020. 
Implementation of Kalman filter for 2D space (day 2). 

Firstly user puts coordinates where the car is located in reality, initial guesses and number of 
iterations. Then we pass it into estimation function where we should check if matrix 
multiplication is correct. 
I rewrited estimation function and I guess my code works well, but I need to rewrite draw 
function to show that the algorithm works correctly. 

--------------------------------------------------------------------------------------------------

11th of July 2020. 
Implementation of Kalman filter for 2D space (day 3). 

In order to rewrite draw function I need to split a figure into 3 parts: 
1) 2 diagrams of Estimation vs Data with respect to each axis,
2) one diagram which contains both data and predictions with respect to each axis. 

I have complete this, now I need to code Kalman filter for moving car in 1D and 2D spaces for 
determined trajectory, then I need to to code Kalman filter for points of 2D space that user 
chooses like in a game. 

--------------------------------------------------------------------------------------------------

13th of July 2020. 
Refactoring the code. 

I want to split all the Kalman filter functionality and all the code for testing it into two 
separate files. 

--------------------------------------------------------------------------------------------------

14th of July 2020. 
Refactoring the code; implementing algorithm for moving car. 

I want to complete refactoring code for Kalman filter for staying car, push it into GitHub 
account and start to implement algorithm for Kalman filter for moving car. 

In order to implement kf in motion with constant motion, I need to determine velocity in km/h 
or m/s, initial location and number of iterations. 
So truth value should be an array, observations are calculated in the for loop. 

My code does not estimate well in motion, I have very large absolute error (about 40 units) and 
my estimations look like outliers. 
The algorithm estimates a position like a car does not move and stays at initial point. However 
if look at graphs you consider that observations are defined around truth value but absolute 
error is too large. 

I can definitely say that I need to learn theory about Kalman filters a little bit more. 
I guess the reason of that is that process variance was very low, so if it is equal to sigma your
algorithm can estimate better but with bigger variance. 
You can try to adjust process variance somehow. 

Now I want to add some animation for the algorithm and function for choosing location with the 
help of keyword like in video game. 
So I need to make GUI and Snake Game, add an acceleration to the Kalman filter and complex 
trajectory.

--------------------------------------------------------------------------------------------------

15th of July 2020. 
Refactoring the code. 

--------------------------------------------------------------------------------------------------

16th - 18th of July 2020. 
Coding IMU data processing (accelerometer). 

1) The algorithm works badly with estimations for accelerometer, 
2) print out acceleration and velocity in the final table, 
3) implement the algorithm for 2D, 
4) start implementing the algorithm for 3D because you need to add some magnetometer and 
animation (the algorithm should estimate position relying on raw data without hidden law). 

--------------------------------------------------------------------------------------------------

20th of July 2020. 
Coding IMU data processing (accelerometer). 

1) The algorithm works badly with estimations for accelerometer.

If I set process variance larger, the algorithm is going to be more accurate: 
(process_var = sigma * 5) is going to predict position more accurate for acceleration. 

I guess that I need to add to the algorithm for moving car and acceleration some adjusted process 
varience value that varies for better estimating like a loss function in neural network. 
But the problem is that the Kalman filter does not know truth value, so we need to add some 
statistical methods to predict the moment when estimations are going to be somewhere around 
truth value (for example interpolation and extrapolation). 

For instance, in the initial moment we are going to predict car's position in the next moment, 
then we we calculate a difference between prediction and real position. And if the difference is
too large, we make process variance larger.
But the problem is that we do not know truth value, and measurements are noisy. 

Now I can say that I need to learn more about different kinds of Kalman filters because simple 
KF is not going to solve a problem of positioning well. 


2) Print out acceleration and velocity in the final table. 

I am not going to print all data into console, but I am going to print all data into separate 
Excel file or database. 


3) Implement the algorithm for 2D. 

I have done it and I guess it works correctly, but now I need to refactor the code. 


4) Start implementing the algorithm for 3D. 

I guess first of all I need to implement KF for gyroscope. 


So now I have following issues: 
1) Implement KF for gyroscope, 
2) Refactor code (put all together), 
3) Print out all data into separate database or Excel file, 
4) Learn more about different kinds of KF for finding out how to make adaptive adjustment of 
noise covariance, 
5) Make the KF algorithm only rely on raw data without hidden law, 
6) You should process all data from accelerometer, 
7) make animation of data processing. 

--------------------------------------------------------------------------------------------------

21st of July 2020. 
Coding IMU data processing (gyroscope). 

Gyroscope reacts on changing angles with respect to the each axis. 
I need to connect moving and staying car and accelerometer to each other. 

I can find some source code of that on GitHub how other developers have done this kind of task. 

--------------------------------------------------------------------------------------------------

22nd of July 2020. 
Coding IMU data processing (gyroscope, accelerometer in 3D space). 

In order to code gyroscope I need to find out its error and frequency and how to process 
gyroscope data.  
I need to code KF for accelerometer in 3D space as well. 

So now it is necessary to refactor all existing code: 
1) for non-moving car, 
2) for car that is moving with constant speed, 
3) for car that is moving with random acceleration.

Code for KF is going to be the same (but process_var differs a little bit), and preprocessing 
is going to differ. 
Can an error of observations with respect to z axis be about 50 meter?

How can I represent final result of kf data processing? 
1) I can show 2 windows: the first one represents all data with respect to each of 3 axis, and 
the second one represents 2 graphs (a map in 2d space and the car's trajectory in 3d space), 
2) I can try to make it in one window. 

I need to refactor all existing code that allows us to do data preprocessing. 
I want to put it all together into one source file. 

--------------------------------------------------------------------------------------------------

23rd of July 2020. 
Coding IMU data processing. 

Corey Schafer has a video about plotting live data in real-time, so I can implement animation 
of moving car in 2D and 3D in addition to that. 

Probably we need to implement prediction of velocity within Kalman filter because velocity can
be measured by GPS (velocity = distance / time) and speedometer or predicted by a formula of 
velocity and acceleration (velocity = acceleration * time). 

--------------------------------------------------------------------------------------------------

27th of July 2020. 
Coding IMU data processing (refactoring kalman_filter). 

FIX THAT IN ALL SOURCE FILES: 
- Add more desciptive comments and explanations on that how every method works, 
- Run all modules of kf from one main source file depending on what options user chooses,
- Notice that kalman filter has the same functionality for all modules in this directory, and we
can add some more complex logic into this module to avoid repeating ourselves so many times (it 
means that I need to learn how to implement kf with adjusted process variance like I mentioned
20th of July 2020), 
- Use callkf functions to reduce code complexity in main function (function get_initial_data 
should be defined for 1d and 3d space as well), 
- Use shorter names of methods and variables because too long names with a lot of underscores 
seem ugly and annoying, 
- I need some inheritance for plot and print_out methods in all test source files because some 
pieces of code are repeated too much, 
- Use format to to print out data, 
- Read more source code in the Internet to be more competent in coding style, 
- Rename n_iter to time_sec, 
- Rewrite all documentation. 

Today I cleaned a code a little bit, tomorrow I am going to implement kf for moving car with 
constant speed and some acceleration in 3d space.

--------------------------------------------------------------------------------------------------

28th of July 2020. 
Coding IMU data processing (gyroscope). 

If I implemented kf with adjusted process variance, I would need only one source file for 
kalman_filter, so I could delete 2 files. 

I guess now I do not need to code kf for 3d space because I did not complete GUI for 2d yet. 
So now I am going to code kf for gyroscope but I do not know how kf precesses gyroscope data. 

Tomorrow I am going to continue working on kf for gyroscope. 

--------------------------------------------------------------------------------------------------

30th of July 2020. 
Coding IMU data processing (adjusted process variance). 

I try to build an algorithm of Kalman filter with adjusted variance for moving car but I do not 
know theory of Kalman filter and I do not want to waste my time on this because I think it is 
not an efficient way to find an answer. 
So I decided to use simple if-else statemants (if current error is large then process_var should 
be large too and vica versa). 

I try to figure out if adjusted process_var improve estimation result by calculating measures of 
central tendency. 
In order to solve this problem I use test_kf_adjusted and test_kf_moving_car which are the same 
file to be honest, so I need to reduce repeated code by importing kalman filter classes with 
different realization as different variables and call them twice in one source file. 

--------------------------------------------------------------------------------------------------

31st of July 2020. 
Compairing two algorithms of estimating position. 

I completed working on compairing two algorithms of estimating position for 1D space: 
one was with constant process_var and another one was with adjusted process_var. 
In colclusion, adjusted algorithm works a little bit more accurate with constant velocity, 
so I am going to use it more. 

Also I tried to write this algorithm for 2D space but the problem is that process_var and 
aposteri_error stopped updating at some point however it works fine with 1D space. 
I guess something is wrong with condition for 2D space because this algorithm works fine for 
1D space, so I need to debug this using breakpoints and see what is going on with the 
variables in this program. 
I solved this problem, I made a mistake when I wrote condition: I forgot to write else 
statemants. 

However I faced another problem which makes the algorithm work uncorrectly: 
process_var[x] is equal to process_var[y]. 
I bet the problem is that something is wrong in the else statemants: maybe else statemants 
are not sensitive to each axis. I fixed that but process_var is constantly growing up, so I 
guess that I need to fix measurement update.
I fixed measurement update and nothing happend. I checked how the algorithm works with 1D
and found out that there is the same issue, so I guess it is necessary to calculate measures
of central tendency for drawing some conclusion about correctness of the algorithm.

Maybe I need to add some unit testing to this module. 

Now I have got to: 
1) refactor my code, 
2) add this adjusted algorithm to module with acceleration, 
3) implement this module for 2D space, 
4) customize methods with method(parameter=default_value) to reduce repeating code. 

Tomorrow I am going to refactor this code and commit it to GitHub.
There is a lot of repeated code in the main function. 

--------------------------------------------------------------------------------------------------

1st of August 2020. 
Console app. 

I need to write compare function for 2D. 

--------------------------------------------------------------------------------------------------

4th of August 2020. 
Measures of central tendency. 

I guess that I need to use weighted medians and means to comapare those 2 algorithms for 
constant velocity. 
In order to be sure if median of medians is the same as overall median, I am going to write 
unit test. But I do not know how to test this module because code in this source file is very
complicated. 
A lot of code in this module should be refactored and tested. 

If there are 2 arrays of non-equal length, medians of medians is not equal to the overall 
median, and this is also true if there are 2 arrays of non-equal length. So I would rather
collect all data and find overall median. 
But I need to manage my memory for that because calculations are going to be very slow. But I 
guess that speed is not so important in this case because I just need to compare this algorithms 
and I do not care about performance now.
However if I use this module in car simulation, it is better choice to rewrite it in C or C++.

Replace TestKalmanFilter with MovingCarKF, for example. 

Tomorrow I am going to implement compare function for 2D and implement overall medians and 
means. 

--------------------------------------------------------------------------------------------------

5th of August 2020. 
Compare function. 

Refactor position.py and add it to console. However you can delete this file and just specify 
constant velocity that is equal to zero. 

Can I add PID controller to kf with adjusted process variance?

In callkf method the same code is repeating twice only because of dimension and display that 
you can pass as parameters. 
This approach does not work (I do not know why).

motion file should generate observations and kf models should procwss these observations. 